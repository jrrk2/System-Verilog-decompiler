(* Usage example *)
open Sv_ast

let jsontree = ref (`String "")

(* Main translation function *)
let translate_tree_to_ast json_file =
  print_endline ("JSON: "^json_file);
  let json = match Yojson.Basic.from_file json_file with `Assoc lst -> `Assoc (List.rev lst) | oth -> oth in
  jsontree := json;
  Sv_parse.parse json

let asthash = Hashtbl.create 255
let tranhash = Hashtbl.create 255

let scan rslt =
  let obj = "obj_dir/" in
  (try Unix.mkdir rslt 0o750 with e -> Printf.eprintf "%s: %s\n" rslt (Printexc.to_string e));
  let lst = ref [] in
  let fd = Unix.opendir obj in
  (try while true do
    let f = Unix.readdir(fd) in if f.[0]<>'.' then lst := f :: !lst;
  done with End_of_file -> Unix.closedir fd);
  
  (* Track statistics *)
  let total_files = List.length !lst in
  let successful = ref 0 in
  let failed = ref 0 in
  
  Printf.printf "Processing %d files...\n\n" total_files;
  
  List.iter (fun itm ->
    Printf.printf "Processing: %s\n" itm;
    try
      (* Parse AST *)
      let ast = translate_tree_to_ast (obj^itm) in
      Hashtbl.add asthash itm ast;
      
      (* 2. NEW: Transform non-synth to synth *)
      let transformed_ast = Sv_transform.transform ~verbose:true ast in
      Hashtbl.add tranhash itm transformed_ast;

      (* Convert to structural with legacy converter *)
      let legacy_result, legacy_warn = Sv_gen_struct.generate_structural_with_warnings transformed_ast in
      
      (* Generate structural AST (not text) *)
      let structural_ast, warn = Sv_tran_struct.generate_structural_ast transformed_ast in

      (* Option 1: Render to text with existing sv_gen.ml *)
      let result = Sv_gen.generate_sv structural_ast 0 in
      
      (* Print warnings *)
      if List.length warn > 0 then begin
        Printf.printf "  Legacy Warnings:\n";
        List.iter (fun w -> Printf.printf "    ⚠ %s\n" w) legacy_warn
      end;
      if List.length warn > 0 then begin
        Printf.printf "  Warnings:\n";
        List.iter (fun w -> Printf.printf "    ⚠ %s\n" w) warn
      end;
      
      (* Write legacy *)
      let output_file = rslt^"legacy_"^itm^".sv" in
      let fd = open_out output_file in
      output_string fd "// Generated by legacy structural converter\n";
      output_string fd "// Primitives defined in: structural_primitives.sv\n\n";
      output_string fd legacy_result;
      close_out fd;

      (* Write output *)
      let output_file = rslt^"decompile_"^itm^".sv" in
      let fd = open_out output_file in
      output_string fd "// Generated by enhanced structural converter\n";
      output_string fd "// Primitives defined in: structural_primitives.sv\n\n";
      output_string fd result;
      close_out fd;
      
      Printf.printf "  ✓ Success: %s\n\n" output_file;
      incr successful
      
    with
    | Failure msg ->
        Printf.eprintf "  ✗ FAILED: %s\n" msg;
        Printf.eprintf "    File: %s\n\n" itm;
        incr failed
    | e ->
        Printf.eprintf "  ✗ EXCEPTION: %s\n" (Printexc.to_string e);
        Printf.eprintf "    File: %s\n\n" itm;
        incr failed
  ) !lst;
  
  (* Print summary *)
  Printf.printf "========================================\n";
  Printf.printf "Conversion Summary\n";
  Printf.printf "========================================\n";
  Printf.printf "Total files:  %d\n" total_files;
  Printf.printf "Successful:   %d\n" !successful;
  Printf.printf "Failed:       %d\n" !failed;
  Printf.printf "========================================\n"
